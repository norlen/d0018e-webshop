import { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useForm } from "react-hook-form";

import { useLogin, useUser } from "@lib/hooks";
import { classNames } from "@lib/util";

import { Button, Error, InputError } from "@components/common";

type FormData = {
  email: string;
  password: string;
};

const LoginPage: NextPage = () => {
  const { mutateUser } = useUser({
    redirectTo: "/",
    redirectIfFound: true,
  });
  const { loading, error, login } = useLogin();
  const {
    register,
    handleSubmit,
    formState: { errors, isValid },
  } = useForm<FormData>({ mode: "onTouched" });

  const onSubmit = handleSubmit(async ({ email, password }) => {
    const data = await login({ email, password });
    if (data) {
      mutateUser(data);
    }
  });

  return (
    <>
      <Head>
        <title>Sebbes ekologiska - Login</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-col gap-8 max-w-md mx-auto bg-white px-8 py-8 items-center rounded-lg md:shadow-lg mt-4">
        <div>
          <h1 className="text-3xl font-bold text-green-500">Logga in</h1>
          <p className="text-sm text-gray-500">för att kunna börja handla.</p>
        </div>

        <form className="flex flex-col gap-4 w-full" onSubmit={onSubmit}>
          <div className="flex flex-col gap-1">
            <input
              type="email"
              placeholder="Email"
              className={classNames(
                "se-input",
                errors.email ? "border-red-300" : "focus:border-green-500"
              )}
              {...register("email", {
                required: "Email måste finnas",
                pattern: {
                  value:
                    /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/,
                  message: "Ogiltigt format",
                },
              })}
              aria-invalid={errors.email ? "true" : "false"}
            />
            {errors.email && <InputError>{errors.email.message}</InputError>}
          </div>

          <div className="flex flex-col gap-1">
            <input
              type="password"
              placeholder="Lösenord"
              className={classNames(
                "se-input",
                errors.password ? "border-red-300" : "focus:border-green-500"
              )}
              {...register("password", {
                required: "Lösenord måste finnas",
                minLength: {
                  value: 5,
                  message: "Lösenord måste vara minst 5 tecken",
                },
                maxLength: {
                  value: 100,
                  message: "Lösenord får högst vara 100 tecken",
                },
              })}
              aria-invalid={errors.password ? "true" : "false"}
            />
            {errors.password && (
              <InputError>{errors.password.message}</InputError>
            )}
          </div>

          <Button
            disabled={!isValid}
            text="Logga in"
            loadingText="Loggar in..."
            loading={loading}
          />
          <Error message={error} />
        </form>

        <div className="border-t border-green-500 w-full flex flex-col items-center">
          <p className="mt-4">
            Har du inget konto?
            <Link href="/bli-medlem">
              <a className="ml-2 text-green-500 font-medium hover:text-green-700">
                Bli medlem
              </a>
            </Link>
          </p>
        </div>
      </main>
    </>
  );
};

export default LoginPage;
