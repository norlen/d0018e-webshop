import { NextPage } from "next";
import Head from "next/head";
import { useForm } from "react-hook-form";

import { useSignup, useUser } from "@lib/hooks";
import { classNames } from "@lib/util";

import { Button, Error, InputError } from "@components/common";

type FormData = {
  name: string;
  email: string;
  password: string;
};

const MemberPage: NextPage = () => {
  // Redirect if already signed in.
  const { mutateUser } = useUser({
    redirectTo: "/",
    redirectIfFound: true,
  });

  const { loading, error, signup } = useSignup();
  const {
    register,
    handleSubmit,
    formState: { errors, isValid },
  } = useForm<FormData>({ mode: "onTouched" });

  const onSubmit = handleSubmit(async ({ name, email, password }) => {
    const user = await signup({ name, email, password });
    if (user.success) {
      mutateUser(user);
    }
  });

  return (
    <>
      <Head>
        <title>Sebbes ekologiska - Login</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-col gap-8 max-w-md mx-auto bg-white px-8 py-8 items-center rounded-lg md:shadow-lg mt-4">
        <div>
          <h1 className="text-3xl font-bold text-green-500">
            Registrera användare
          </h1>
          <p className="text-sm text-gray-500">för att kunna lägga ordrar</p>
        </div>
        <form onSubmit={onSubmit} className="flex flex-col gap-4 w-full">
          <div className="flex flex-col gap-1">
            <input
              type="text"
              placeholder="Namn"
              className={classNames(
                "se-input autofocus",
                errors.name ? "border-red-300" : "focus:border-green-500"
              )}
              {...register("name", {
                required: "Namn måste finnas",
                minLength: {
                  value: 5,
                  message: "Namn måste vara minst 5 tecken",
                },
                maxLength: {
                  value: 100,
                  message: "Namn får högst vara 100 tecken",
                },
              })}
              aria-invalid={errors.name ? "true" : "false"}
            />
            {errors.name && <InputError>{errors.name.message}</InputError>}
          </div>

          <div className="flex flex-col gap-1">
            <input
              type="email"
              placeholder="Email"
              className={classNames(
                "se-input",
                errors.email ? "border-red-300" : "focus:border-green-500"
              )}
              {...register("email", {
                required: "Email måste finnas",
                pattern: {
                  value:
                    /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/,
                  message: "Ogiltigt format",
                },
              })}
              aria-invalid={errors.email ? "true" : "false"}
            />
            {errors.email && <InputError>{errors.email.message}</InputError>}
          </div>

          <div className="flex flex-col gap-1">
            <input
              type="password"
              placeholder="Lösenord"
              className={classNames(
                "se-input",
                errors.password ? "border-red-300" : "focus:border-green-500"
              )}
              {...register("password", {
                required: "Lösenord måste finnas",
                minLength: {
                  value: 5,
                  message: "Lösenord måste vara minst 5 tecken",
                },
                maxLength: {
                  value: 100,
                  message: "Lösenord får högst vara 100 tecken",
                },
              })}
              aria-invalid={errors.password ? "true" : "false"}
            />
            {errors.password && (
              <InputError>{errors.password.message}</InputError>
            )}
          </div>

          <Button
            disabled={!isValid}
            text="Skapa användare"
            loadingText="Skapar användare..."
            loading={loading}
          />
          <Error message={error} />
        </form>
      </main>
    </>
  );
};

export default MemberPage;
