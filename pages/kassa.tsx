import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import type { NextPage } from "next";
import { useState } from "react";

import { useCart } from "@lib/hooks";
import { CartItem } from "@lib/db/cart";
import { useRemoveFromCart, useAddOrder } from "@lib/hooks";
import { useRouter } from "next/router";

const CheckoutPage: NextPage = () => {
  const { cart } = useCart();
  const { loading, error, addOrder } = useAddOrder();
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [phoneNumber, setPhoneNumber] = useState("");
  const [address, setAddress] = useState("");
  const [city, setCity] = useState("");
  const [postalCode, setPostalCode] = useState("");
  const router = useRouter();

  const subtotal = cart
    .map((i) => i.price * i.quantity)
    .reduce((acc, v) => acc + v, 0);

  const onSubmit = async () => {
    const cartItems = cart.map((c) => ({ id: c.id, quantity: c.quantity }));

    const res = await addOrder({
      name,
      email,
      address,
      postalCode,
      city,
      phoneNumber,
      subtotal,
      cart: cartItems,
    });
    router.push(`/order/${res.orderId}`);
  };

  const canPlaceOrder =
    cart.length > 0 &&
    name.length > 5 &&
    email.length > 5 &&
    address.length > 5 &&
    postalCode.length >= 5 &&
    city.length > 0 &&
    phoneNumber.length > 5;

  return (
    <>
      <Head>
        <title>Sebbes butik</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-col lg:flex-row gap-12 justify-center lg:px-12 py-4 lg:py-8">
        <div className="flex flex-col gap-4 max-w-md mx-auto lg:m-0 px-2">
          <h1 className="text-2xl">Leveransinformation</h1>
          <form className="flex flex-col gap-4">
            <Input
              name="name"
              readableName="Namn"
              type="text"
              value={name}
              setValue={setName}
            />
            <Input
              name="email"
              readableName="Epost"
              type="email"
              value={email}
              setValue={setEmail}
            />
            <Input
              name="address"
              readableName="Adress"
              type="text"
              value={address}
              setValue={setAddress}
            />
            <div className="flex gap-2">
              <Input
                name="city"
                readableName="Stad"
                type="text"
                value={city}
                setValue={setCity}
              />
              <Input
                name="postalCode"
                readableName="Postnummer"
                type="text"
                value={postalCode}
                setValue={setPostalCode}
              />
            </div>
            <Input
              name="phoneNumber"
              readableName="Telefonnummer"
              type="text"
              value={phoneNumber}
              setValue={setPhoneNumber}
            />
          </form>
        </div>
        <div className="flex flex-col gap-4 max-w-md w-full mx-auto lg:m-0 px-2">
          <h1 className="text-2xl">Produkter</h1>
          <div className="flex flex-col gap-4 px-4 bg-white rounded-lg border border-gray-300">
            <div className="divide-y divide-gray-200">
              {cart.map((item) => (
                <li key={item.id} className="py-6 flex">
                  <CartItem item={item} />
                </li>
              ))}
            </div>
            <div className="border-t border-gray-200 pt-6 pb-2 px-2">
              <div className="flex justify-between text-base font-medium text-gray-900">
                <p>Totalt</p>
                <p>{subtotal} kr</p>
              </div>
            </div>
            <div className="border-t border-gray-200 py-4">
              <button
                className={`bg-green-500 py-2 px-4 w-full text-white rounded-md ${
                  (loading || !canPlaceOrder) && "disabled opacity-50"
                } ${!canPlaceOrder && "cursor-not-allowed"} ${
                  loading && "cursor-wait"
                }`}
                onClick={onSubmit}
              >
                {loading ? "Lägger order..." : "Lägg order"}
              </button>
            </div>
          </div>
        </div>
        {error && (
          <div className="bg-red-200 rounded-md text-center py-1 text-sm border-red-500 border">
            {error}
          </div>
        )}
      </main>
    </>
  );
};

type InputProps = {
  name: string;
  readableName: string;
  type: string;
  value: string;
  setValue: any;
};

const Input = ({ name, readableName, type, value, setValue }: InputProps) => {
  return (
    <div className="flex flex-col gap-1">
      <label
        className="block text-sm font-medium w-full text-gray-700"
        htmlFor={name}
      >
        {readableName}
      </label>
      <input
        id={name}
        type={type}
        required
        value={value}
        onChange={(e) => setValue(e.target.value)}
        className="input w-full rounded-lg px-4 py-2 border border-gray-500 focus:outline-none focus:border-green-500 active:outline-none autofocus"
      />
    </div>
  );
};

type CartItemProps = {
  item: CartItem;
};

const CartItem = ({ item }: CartItemProps) => {
  const { mutateCart } = useCart();
  const { loading, error, removeFromCart } = useRemoveFromCart();

  const removeProduct = async (productId: string) => {
    await removeFromCart({ productId });
    await mutateCart();
  };

  return (
    <>
      <div className="flex-shrink-0 w-24 h-24 border border-gray-200 rounded-md overflow-hidden">
        <Image
          width={96}
          height={96}
          src={item.image_url}
          alt={item.name}
          className="w-full h-full object-center object-cover"
        />
      </div>

      <div className="ml-4 flex-1 flex flex-col">
        <div>
          <div className="flex justify-between text-base font-medium text-gray-900">
            <h3>
              <Link href={`/produkt/${item.id}`}>
                <a>{item.name}</a>
              </Link>
            </h3>
            <p className="">{item.price} kr/kg</p>
          </div>
          <p className="text-gray-500">Antal {item.quantity}</p>
          <p className="text-gray-500">
            Totalt {item.quantity * item.price} kr
          </p>
        </div>
        <div className="flex-1 flex items-end justify-between text-sm">
          <button
            type="button"
            className={`font-medium text-green-500 hover:text-green-700 ${
              loading ? "disabled opacity-50 hover:text-green-500" : ""
            }`}
            onClick={() => removeProduct(item.id)}
          >
            {loading ? "Tar bort..." : "Ta bort"}
          </button>
        </div>
      </div>
    </>
  );
};

export default CheckoutPage;
