import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";
import { useForm } from "react-hook-form";

import { useCart, useRemoveFromCart, useAddOrder } from "@lib/hooks";
import { CartItem } from "@lib/db";
import { classNames } from "@lib/util";

import { Button, Error, InputError } from "@components/common";

type FormData = {
  name: string;
  email: string;
  phoneNumber: string;
  address: string;
  city: string;
  postalCode: string;
};

const CheckoutPage: NextPage = () => {
  const { cart } = useCart();
  const { loading, error, addOrder } = useAddOrder();
  const router = useRouter();

  const {
    register,
    handleSubmit,
    formState: { errors, isValid },
  } = useForm<FormData>({ mode: "onTouched" });

  const subtotal = cart
    .map((i) => i.price * i.quantity)
    .reduce((acc, v) => acc + v, 0);

  const onSubmit = handleSubmit(async (data) => {
    const cartItems = cart.map((c) => ({ id: c.id, quantity: c.quantity }));

    const result = await addOrder({ ...data, subtotal, cart: cartItems });
    if (result.success) {
      router.push(`/order/${result.orderId}`);
    }
  });

  return (
    <>
      <Head>
        <title>Sebbes ekologiska</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-col gap-8 justify-center lg:px-12 py-4 lg:py-8">
        <Error message={error} />
        <div className="flex flex-col lg:flex-row gap-12 justify-center">
          <div className="flex flex-col gap-4 max-w-md mx-auto lg:m-0 px-2">
            <h1 className="text-2xl">Leveransinformation</h1>
            <form className="flex flex-col gap-4">
              <div className="flex flex-col gap-1">
                <label
                  className="block text-sm font-medium w-full text-gray-700"
                  htmlFor="name"
                >
                  Namn
                </label>
                <input
                  id="name"
                  type="text"
                  className={classNames(
                    "se-input autofocus",
                    errors.name ? "border-red-300" : "focus:border-green-500"
                  )}
                  {...register("name", {
                    required: "Namn måste finnas",
                    minLength: {
                      value: 5,
                      message: "Namn måste vara minst 5 tecken",
                    },
                    maxLength: {
                      value: 100,
                      message: "Namn får högst vara 100 tecken",
                    },
                  })}
                  aria-invalid={errors.name ? "true" : "false"}
                />
                {errors.name && <InputError>{errors.name.message}</InputError>}
              </div>

              <div className="flex flex-col gap-1">
                <label
                  className="block text-sm font-medium w-full text-gray-700"
                  htmlFor="email"
                >
                  Email
                </label>
                <input
                  id="email"
                  type="email"
                  className={classNames(
                    "se-input",
                    errors.email ? "border-red-300" : "focus:border-green-500"
                  )}
                  {...register("email", {
                    required: "Epost måste finnas",
                    pattern: {
                      value:
                        /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/,
                      message: "Ogiltigt format",
                    },
                  })}
                  aria-invalid={errors.email ? "true" : "false"}
                />
                {errors.email && (
                  <InputError>{errors.email.message}</InputError>
                )}
              </div>

              <div className="flex flex-col gap-1">
                <label
                  className="block text-sm font-medium w-full text-gray-700"
                  htmlFor="address"
                >
                  Adress
                </label>
                <input
                  id="address"
                  type="text"
                  className={classNames(
                    "se-input",
                    errors.address ? "border-red-300" : "focus:border-green-500"
                  )}
                  {...register("address", {
                    required: "Adress måste finnas",
                    minLength: {
                      value: 5,
                      message: "Adress måste vara minst 5 tecken",
                    },
                    maxLength: {
                      value: 100,
                      message: "Adress får högst vara 100 tecken",
                    },
                  })}
                  aria-invalid={errors.address ? "true" : "false"}
                />
                {errors.address && (
                  <InputError>{errors.address.message}</InputError>
                )}
              </div>

              <div className="flex gap-2">
                <div className="flex flex-col gap-1">
                  <label
                    className="block text-sm font-medium w-full text-gray-700"
                    htmlFor="city"
                  >
                    Stad
                  </label>
                  <input
                    id="city"
                    type="text"
                    className={classNames(
                      "se-input",
                      errors.city ? "border-red-300" : "focus:border-green-500"
                    )}
                    {...register("city", {
                      required: "Stad måste finnas",
                      minLength: {
                        value: 2,
                        message: "Stad måste vara minst 2 tecken",
                      },
                      maxLength: {
                        value: 100,
                        message: "Stad får högst vara 100 tecken",
                      },
                    })}
                    aria-invalid={errors.city ? "true" : "false"}
                  />
                  {errors.city && (
                    <InputError>{errors.city.message}</InputError>
                  )}
                </div>

                <div className="flex flex-col gap-1">
                  <label
                    className="block text-sm font-medium w-full text-gray-700"
                    htmlFor="postalCode"
                  >
                    Postnummer
                  </label>
                  <input
                    id="postalCode"
                    type="text"
                    className={classNames(
                      "se-input",
                      errors.postalCode
                        ? "border-red-300"
                        : "focus:border-green-500"
                    )}
                    {...register("postalCode", {
                      required: "Postnummber måste finnas",
                      pattern: {
                        value: /^[0-9]{5}$/,
                        message: "Ogiltigt postnummer",
                      },
                    })}
                    aria-invalid={errors.postalCode ? "true" : "false"}
                  />
                  {errors.postalCode && (
                    <InputError>{errors.postalCode.message}</InputError>
                  )}
                </div>
              </div>

              <div className="flex flex-col gap-1">
                <label
                  className="block text-sm font-medium w-full text-gray-700"
                  htmlFor="phoneNumber"
                >
                  Telefonnummer
                </label>
                <input
                  id="phoneNumber"
                  type="text"
                  className={classNames(
                    "se-input",
                    errors.phoneNumber
                      ? "border-red-300"
                      : "focus:border-green-500"
                  )}
                  {...register("phoneNumber", {
                    required: "Telefonnummer måste finnas",
                    pattern: {
                      value: /^([+]46|0)\d{9}$/,
                      message: "Ogiltigt telefonnummer",
                    },
                  })}
                  aria-invalid={errors.phoneNumber ? "true" : "false"}
                />
                {errors.phoneNumber && (
                  <InputError>{errors.phoneNumber.message}</InputError>
                )}
              </div>
            </form>
          </div>
          <div className="flex flex-col gap-4 max-w-md w-full mx-auto lg:m-0 px-2">
            <h1 className="text-2xl">Produkter</h1>
            <div className="flex flex-col gap-4 px-4 bg-white rounded-lg border border-gray-300">
              <div className="divide-y divide-gray-200">
                {cart.map((item) => (
                  <li key={item.id} className="py-6 flex">
                    <CartItem item={item} />
                  </li>
                ))}
              </div>
              <div className="border-t border-gray-200 pt-6 pb-2 px-2">
                <div className="flex justify-between text-base font-medium text-gray-900">
                  <p>Totalt</p>
                  <p>{subtotal} kr</p>
                </div>
              </div>
              <div className="border-t border-gray-200 py-4">
                <Button
                  disabled={!isValid}
                  text="Skapa order"
                  loadingText="Skapar order..."
                  loading={loading}
                  onClick={onSubmit}
                />
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

type CartItemProps = {
  item: CartItem;
};

const CartItem = ({ item }: CartItemProps) => {
  const { mutateCart } = useCart();
  const { loading, error, removeFromCart } = useRemoveFromCart();

  const removeProduct = async (productId: string) => {
    await removeFromCart({ productId });
    await mutateCart();
  };

  return (
    <>
      <div className="flex-shrink-0 w-24 h-24 border border-gray-200 rounded-md overflow-hidden">
        <Image
          width={96}
          height={96}
          src={item.image_url}
          alt={item.name}
          className="w-full h-full object-center object-cover"
        />
      </div>

      <div className="ml-4 flex-1 flex flex-col">
        <div>
          <div className="flex justify-between text-base font-medium text-gray-900">
            <h3>
              <Link href={`/produkt/${item.id}`}>
                <a>{item.name}</a>
              </Link>
            </h3>
            <p className="">{item.price} kr/kg</p>
          </div>
          <p className="text-gray-500">Antal {item.quantity}</p>
          <p className="text-gray-500">
            Totalt {item.quantity * item.price} kr
          </p>
        </div>
        <div className="flex-1 flex items-end justify-between text-sm">
          <button
            type="button"
            className={`font-medium text-green-500 hover:text-green-700 ${
              loading ? "disabled opacity-50 hover:text-green-500" : ""
            }`}
            onClick={() => removeProduct(item.id)}
          >
            {loading ? "Tar bort..." : "Ta bort"}
          </button>
        </div>
      </div>
    </>
  );
};

export default CheckoutPage;
